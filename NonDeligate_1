// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.5.0 <0.9.0;
 
import 'github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol';
import { IERC1155 } from "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import { IERC20 } from "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol";
import { IFixedProductMarketMaker } from "./IFixedProductMarketMaker.sol";


contract PolyTrader {
    address payable public owner;
    IERC1155 public immutable conditionalTokens;
    IERC20 public immutable usdcTokens;
 
    constructor(IERC1155 _conditionalTokens, IERC20 _usdcTokens) {
        conditionalTokens = _conditionalTokens;
        usdcTokens = _usdcTokens;
        owner =  payable(msg.sender);
    }

    receive() external payable{}

    function withdrawMatic(uint _amount) external{
        require(msg.sender == owner, "caller is not owner");
        owner.transfer(_amount);      
     }

    function withdrawUsdc(IERC20 token, uint256 _amount) external{
       require(msg.sender == owner, "caller is not owner");
       uint256 usdcBalance = token.balanceOf(address(this));
       require(_amount <= usdcBalance, "balance too low");
       token.transfer(owner, _amount);
    }

    function getMaticBalance() external view returns (uint){
        return address(this).balance;
    }
    function getUsdcBalance(IERC20 token) external view returns (uint){
        return token.balanceOf(address(this));
    }

    function approve(
    IFixedProductMarketMaker marketMaker,
    uint256 amount
    ) external returns (bool) {     
        bool succ = usdcTokens.approve(address(marketMaker), amount+100);
        return succ;
    }

    function addFunding(
        IFixedProductMarketMaker marketMaker,
        uint256 addedFunds,
        uint256[] calldata distributionHint
    ) external  {
         marketMaker.addFunding(addedFunds, distributionHint);
    }

    function buy(
        IFixedProductMarketMaker marketMaker,
        uint256 investmentAmount,
        uint256 outcomeIndex,
        uint256 minOutcomeTokensToBuy
    ) external  {
         marketMaker.buy(investmentAmount, outcomeIndex, minOutcomeTokensToBuy);
    }
}
